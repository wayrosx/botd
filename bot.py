import logging
import sqlite3
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –¢–û–ö–ï–ù –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù –ë–û–¢–ê ‚ö†Ô∏è
BOT_TOKEN = "8417399077:AAFW3-iel7rGYRwA6ORdbr9V036hKFA18L8"

# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® USER_ID ‚ö†Ô∏è
ADMIN_IDS = [1292233190, 7805404869, 7691643567]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
QUESTION, MODERATION = range(2)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_USERNAME_MAP = {
    1292233190: "@x3klls",
    7805404869: "@hilliees",
    7691643567: "@anchous_faraon"
}

# –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫
CHAT_LINK = "https://t.me/+t4_PrY7o1NIwYzBi"

# –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞ Minecraft dyO
CLAN_RULES = """
üìú –ü–†–ê–í–ò–õ–ê –ö–õ–ê–ù–ê MINECRAFT dyO

‚ö†Ô∏è –í—Å—Ç—É–ø–∏–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!

1.1 –ü—É–±–ª–∏—á–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 3 —á–∞—Å–æ–≤ –¥–æ 3 –¥–Ω–µ–π

1.2 –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 1 —á–∞—Å–∞ –¥–æ 1 –¥–Ω—è

1.3 –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∏ —É–Ω–∏–∂–µ–Ω–∏–µ —Ä–æ–¥–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 1 –¥–Ω—è –¥–æ 7 –¥–Ω–µ–π

1.4 –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∏ —É–Ω–∏–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 3 –¥–Ω–µ–π –¥–æ 14 –¥–Ω–µ–π

1.5 –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –∏ —É–Ω–∏–∂–µ–Ω–∏–µ —Ä–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞
üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞

1.6 –ù–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∂–µ –µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 3 –¥–Ω–µ–π –¥–æ 7 –¥–Ω–µ–π

1.7 –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä–æ–≤, —ç–º–æ–¥–∑–∏ –∏ —Ç.–ø.
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ 3 —á–∞—Å–æ–≤

1.8 –ö–∞–ø—Å(–æ—Ç 3 —Å–ª–æ–≤), —Å–ø–∞–º, –∞ —Ç–∞–∫–∂–µ —Ñ–ª—É–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ 3 —á–∞—Å–æ–≤

1.9 –†–∞–∑–∂–∏–≥–∞–Ω–∏–µ –º–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π, –º–µ–∂—Ä–∞—Å–æ–≤–æ–π, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π, —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–π —Ä–æ–∑–Ω–∏
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 1 –¥–Ω—è –¥–æ 7 –¥–Ω–µ–π

2.0 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ 3 —á–∞—Å–æ–≤

2.1 –í–≤–µ–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 3 —á–∞—Å–æ–≤ –¥–æ 3 –¥–Ω–µ–π

2.2 –ü—Ä–∏–∑—ã–≤ –Ω–µ –≤—Å—Ç—É–ø–∞—Ç—å –≤ Discord –°–µ—Ä–≤–µ—Ä
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 1 –¥–Ω—è –¥–æ 3 –¥–Ω–µ–π

2.3 –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 3 —á–∞—Å–æ–≤ –¥–æ 3 –¥–Ω–µ–π

2.4 –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, —É–≥—Ä–æ–∑—ã
üö´ –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞

2.5 –í—ã–¥–∞—á–∞ —Å–µ–±—è –∑–∞ —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ—Ä—ã—Å—Ç–Ω—ã—Ö —Ü–µ–ª—è—Ö
üö´ –ë–∞–Ω –æ—Ç 7 –¥–Ω–µ–π –¥–æ 30 –¥–Ω–µ–π

2.6 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–∞—é—â–∏—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤
‚ö†Ô∏è –ü–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
üö´ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ - –ë–∞–Ω –æ—Ç 7 –¥–Ω–µ–π –¥–æ 14 –¥–Ω–µ–π

2.7 –û–±–º–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–æ—Ä—ã—Å—Ç–Ω—ã—Ö —Ü–µ–ª—è—Ö
üö´ –ë–∞–Ω –æ—Ç 3 –¥–æ 10 –¥–Ω–µ–π

2.8 –í–≤–µ–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ
üö´ –ú—É—Ç –Ω–∞ –≤—Å—ë–º —Å–µ—Ä–≤–µ—Ä–µ –æ—Ç 2 –¥–æ 10 –¥–Ω–µ–π

üîß –ú–ï–•–ê–ù–ò–ö–ê (–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤—ã—à–µ):

3.1 –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–π
‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—É

3.2 –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–π
‚ö†Ô∏è 2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É

‚öñÔ∏è –í–ê–ñ–ù–û–ï:

‚Ä¢ –ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –≤—ã–¥–∞–≤–∞—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–≤–æ—ë —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ø—Ä–∞–≤–µ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –¥–æ—Å—Ç—É–ø–µ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω

üéØ –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –º–µ—Ä—ã –≤–ø–ª–æ—Ç—å –¥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞!
"""

class Database:
    def __init__(self, db_path="bot_database.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                application_text TEXT,
                status TEXT DEFAULT 'pending',
                reviewed_by INTEGER,
                reviewed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS questions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                question_text TEXT,
                status TEXT DEFAULT 'unanswered',
                reviewed_by INTEGER,
                reviewed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS banned_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE,
                username TEXT,
                reason TEXT,
                banned_by INTEGER,
                banned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def execute_query(self, query, params=(), fetch=False):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(query, params)
        
        if fetch:
            result = cursor.fetchall()
            columns = [description[0] for description in cursor.description]
            result = [dict(zip(columns, row)) for row in result]
        else:
            result = None
        
        conn.commit()
        conn.close()
        return result

    def add_user(self, user_id, username, first_name, last_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.execute_query(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, last_name)
        )

    def add_application(self, user_id, application_text):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        self.execute_query(
            "INSERT INTO applications (user_id, application_text) VALUES (?, ?)",
            (user_id, application_text)
        )

    def add_question(self, user_id, question_text):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
        self.execute_query(
            "INSERT INTO questions (user_id, question_text) VALUES (?, ?)",
            (user_id, question_text)
        )

    def get_pending_applications(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
        return self.execute_query(
            "SELECT a.*, u.username, u.first_name, u.last_name, "
            "ru.username as reviewer_username, ru.first_name as reviewer_first_name, ru.last_name as reviewer_last_name "
            "FROM applications a "
            "LEFT JOIN users u ON a.user_id = u.user_id "
            "LEFT JOIN users ru ON a.reviewed_by = ru.user_id "
            "WHERE a.status = 'pending' "
            "ORDER BY a.created_at",
            fetch=True
        )

    def get_unanswered_questions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        return self.execute_query(
            "SELECT q.*, u.username, u.first_name, u.last_name, "
            "ru.username as reviewer_username, ru.first_name as reviewer_first_name, ru.last_name as reviewer_last_name "
            "FROM questions q "
            "LEFT JOIN users u ON q.user_id = u.user_id "
            "LEFT JOIN users ru ON q.reviewed_by = ru.user_id "
            "WHERE q.status = 'unanswered' "
            "ORDER BY q.created_at",
            fetch=True
        )

    def get_application(self, app_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
        result = self.execute_query(
            "SELECT a.*, u.username FROM applications a "
            "LEFT JOIN users u ON a.user_id = u.user_id "
            "WHERE a.id = ?",
            (app_id,),
            fetch=True
        )
        return result[0] if result else None

    def get_question(self, question_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ ID"""
        result = self.execute_query(
            "SELECT q.*, u.username FROM questions q "
            "LEFT JOIN users u ON q.user_id = u.user_id "
            "WHERE q.id = ?",
            (question_id,),
            fetch=True
        )
        return result[0] if result else None

    def get_admin_info(self, admin_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ"""
        result = self.execute_query(
            "SELECT username, first_name, last_name FROM users WHERE user_id = ?",
            (admin_id,),
            fetch=True
        )
        return result[0] if result else None

    def update_application_status(self, app_id, status, reviewed_by=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
        if reviewed_by:
            self.execute_query(
                "UPDATE applications SET status = ?, reviewed_by = ?, reviewed_at = CURRENT_TIMESTAMP WHERE id = ?",
                (status, reviewed_by, app_id)
            )
        else:
            self.execute_query(
                "UPDATE applications SET status = ? WHERE id = ?",
                (status, app_id)
            )

    def update_question_status(self, question_id, status, reviewed_by=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        if reviewed_by:
            self.execute_query(
                "UPDATE questions SET status = ?, reviewed_by = ?, reviewed_at = CURRENT_TIMESTAMP WHERE id = ?",
                (status, reviewed_by, question_id)
            )
        else:
            self.execute_query(
                "UPDATE questions SET status = ? WHERE id = ?",
                (status, question_id)
            )

    def start_review_application(self, app_id, reviewer_id):
        """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        self.execute_query(
            "UPDATE applications SET reviewed_by = ?, reviewed_at = CURRENT_TIMESTAMP WHERE id = ?",
            (reviewer_id, app_id)
        )

    def start_review_question(self, question_id, reviewer_id):
        """–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
        self.execute_query(
            "UPDATE questions SET reviewed_by = ?, reviewed_at = CURRENT_TIMESTAMP WHERE id = ?",
            (reviewer_id, question_id)
        )

    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self.execute_query("SELECT user_id FROM users", fetch=True)

    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {}
        
        result = self.execute_query("SELECT COUNT(*) as count FROM users", fetch=True)
        stats['total_users'] = result[0]['count'] if result else 0
        
        result = self.execute_query("SELECT COUNT(*) as count FROM applications", fetch=True)
        stats['total_applications'] = result[0]['count'] if result else 0
        
        result = self.execute_query("SELECT COUNT(*) as count FROM questions", fetch=True)
        stats['total_questions'] = result[0]['count'] if result else 0
        
        result = self.execute_query(
            "SELECT COUNT(*) as count FROM applications WHERE status = 'pending'", 
            fetch=True
        )
        stats['pending_applications'] = result[0]['count'] if result else 0
        
        result = self.execute_query(
            "SELECT COUNT(*) as count FROM questions WHERE status = 'unanswered'", 
            fetch=True
        )
        stats['unanswered_questions'] = result[0]['count'] if result else 0
        
        result = self.execute_query("SELECT COUNT(*) as count FROM banned_users", fetch=True)
        stats['banned_users'] = result[0]['count'] if result else 0
        
        return stats

    def ban_user(self, user_id, username, reason, banned_by):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.execute_query(
            "INSERT OR REPLACE INTO banned_users (user_id, username, reason, banned_by) VALUES (?, ?, ?, ?)",
            (user_id, username, reason, banned_by)
        )

    def unban_user(self, user_id):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.execute_query(
            "DELETE FROM banned_users WHERE user_id = ?",
            (user_id,)
        )

    def is_user_banned(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        result = self.execute_query(
            "SELECT * FROM banned_users WHERE user_id = ?",
            (user_id,),
            fetch=True
        )
        return len(result) > 0

    def get_banned_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return self.execute_query(
            "SELECT bu.*, u.username as banned_by_username FROM banned_users bu "
            "LEFT JOIN users u ON bu.banned_by = u.user_id "
            "ORDER BY bu.banned_at DESC",
            fetch=True
        )

    def get_user_by_username(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
        result = self.execute_query(
            "SELECT * FROM users WHERE username = ?",
            (username.lstrip('@'),),
            fetch=True
        )
        return result[0] if result else None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

class MinecraftBot:
    def __init__(self):
        self.application = None

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
            ],
            states={
                QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_question)],
                MODERATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_moderation)],
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )

        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("stats", self.stats))
        self.application.add_handler(CommandHandler("addadmin", self.add_admin))
        self.application.add_handler(CommandHandler("rules", self.show_rules))
        self.application.add_handler(CommandHandler("ban", self.ban_user_command))
        self.application.add_handler(CommandHandler("unban", self.unban_user_command))
        self.application.add_handler(CommandHandler("banned", self.show_banned_users))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(conv_handler)

    def main_keyboard(self, user_id):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if user_id in ADMIN_IDS:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            keyboard = [
                [KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å"), KeyboardButton("üìù –ù–∞–±–æ—Ä –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é")],
                [KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞"), KeyboardButton("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]
            ]
        else:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = [
                [KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å"), KeyboardButton("üìù –ù–∞–±–æ—Ä –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é")],
                [KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞")]
            ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def admin_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="admin_applications")],
            [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="admin_questions")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_banned")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def cancel_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
        keyboard = [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    def format_admin_name(self, admin_id, admin_info=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö ID"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ ID
        if admin_id in ADMIN_USERNAME_MAP:
            return ADMIN_USERNAME_MAP[admin_id]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã
        if not admin_info:
            admin_info = db.get_admin_info(admin_id)
        
        if not admin_info:
            return f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {admin_id})"
        
        username = admin_info.get('username')
        first_name = admin_info.get('first_name')
        last_name = admin_info.get('last_name')
        
        if username:
            return f"@{username}"
        elif first_name and last_name:
            return f"{first_name} {last_name}"
        elif first_name:
            return first_name
        else:
            return f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {admin_id})"

    async def notify_admins_about_review(self, reviewer_id, item_type, item_id, item_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏/–≤–æ–ø—Ä–æ—Å–∞"""
        reviewer_name = self.format_admin_name(reviewer_id)
        
        if item_type == "application":
            message = (
                f"üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {reviewer_name} –Ω–∞—á–∞–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{item_id}\n"
                f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: @{item_info['username']} (ID: {item_info['user_id']})\n"
                f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {item_info['created_at']}"
            )
        elif item_type == "question":
            message = (
                f"üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {reviewer_name} –Ω–∞—á–∞–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ #{item_id}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: @{item_info['username']} (ID: {item_info['user_id']})\n"
                f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {item_info['created_at']}"
            )
        else:
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞—á–∞–ª —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
        for admin_id in ADMIN_IDS:
            if admin_id != reviewer_id:
                try:
                    await self.application.bot.send_message(admin_id, message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_banned(user.id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
        
        db.add_user(user.id, user.username, user.first_name, user.last_name)
        
        welcome_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫–ª–∞–Ω–∞ Minecraft dyO.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        
        if user.id in ADMIN_IDS:
            welcome_text += "\n\nüëë –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=self.main_keyboard(user.id)
        )

    async def show_rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞"""
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_banned(user_id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(CLAN_RULES) > 4000:
            rules_parts = [CLAN_RULES[i:i+4000] for i in range(0, len(CLAN_RULES), 4000)]
            for i, part in enumerate(rules_parts):
                if i == 0:
                    await update.message.reply_text(part)
                else:
                    await update.message.reply_text(part)
        else:
            await update.message.reply_text(CLAN_RULES)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.main_keyboard(user_id)
        )

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await update.message.reply_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=self.admin_keyboard()
        )

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        stats = db.get_stats()
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üìù –ó–∞—è–≤–æ–∫: {stats['total_applications']}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}\n"
            f"‚è≥ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {stats['pending_applications']}\n"
            f"‚è≥ –ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['unanswered_questions']}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['banned_users']}"
        )

    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.message.from_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")
            return
        
        try:
            new_admin_id = int(context.args[0])
            if new_admin_id not in ADMIN_IDS:
                ADMIN_IDS.append(new_admin_id)
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            else:
                await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def ban_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args or len(context.args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –ø—Ä–∏—á–∏–Ω–∞_–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            return
        
        username = context.args[0]
        reason = ' '.join(context.args[1:])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = db.get_user_by_username(username)
        if not user_info:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.ban_user(user_info['user_id'], user_info['username'], reason, user_id)
        
        admin_name = self.format_admin_name(user_id)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info['username']} (ID: {user_info['user_id']}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
            f"üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {admin_name}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            if admin_id != user_id:
                try:
                    await self.application.bot.send_message(
                        admin_id,
                        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info['username']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}\n"
                        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    async def unban_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @username")
            return
        
        username = context.args[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = db.get_user_by_username(username)
        if not user_info:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not db.is_user_banned(user_info['user_id']):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.unban_user(user_info['user_id'])
        
        admin_name = self.format_admin_name(user_id)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info['username']} (ID: {user_info['user_id']}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
            f"üëÆ‚Äç‚ôÇÔ∏è –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {admin_name}"
        )

    async def show_banned_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = update.message.from_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        banned_users = db.get_banned_users()
        if not banned_users:
            await update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        banned_list = "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
        for banned in banned_users:
            banned_by = f"@{banned['banned_by_username']}" if banned['banned_by_username'] else f"ID: {banned['banned_by']}"
            banned_list += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{banned['username']} (ID: {banned['user_id']})\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {banned['reason']}\n"
                f"üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {banned_by}\n"
                f"üìÖ –î–∞—Ç–∞: {banned['banned_at']}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        await update.message.reply_text(banned_list)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        
        if query.data == "admin_back":
            await query.edit_message_text(
                "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=None
            )
            await query.message.reply_text(
                "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞.",
                reply_markup=self.main_keyboard(user_id)
            )
            return

        if user_id not in ADMIN_IDS:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        data = query.data

        if data == "admin_applications":
            await self.show_applications(query, context)
        elif data == "admin_questions":
            await self.show_questions(query, context)
        elif data == "admin_stats":
            await self.show_stats(query, context)
        elif data == "admin_banned":
            await self.show_banned_users_callback(query, context)
        elif data.startswith("app_"):
            await self.handle_application_action(query, data, context)
        elif data.startswith("question_"):
            await self.handle_question_action(query, data, context)
        else:
            # –ï—Å–ª–∏ callback_data –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            await query.edit_message_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=self.admin_keyboard()
            )

    async def show_banned_users_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ callback"""
        banned_users = db.get_banned_users()
        if not banned_users:
            await query.edit_message_text("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=self.admin_keyboard())
            return

        banned_list = "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n\n"
        for banned in banned_users:
            banned_by = f"@{banned['banned_by_username']}" if banned['banned_by_username'] else f"ID: {banned['banned_by']}"
            banned_list += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{banned['username']} (ID: {banned['user_id']})\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {banned['reason']}\n"
                f"üëÆ‚Äç‚ôÇÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {banned_by}\n"
                f"üìÖ –î–∞—Ç–∞: {banned['banned_at']}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        await query.edit_message_text(banned_list, reply_markup=self.admin_keyboard())

    async def show_applications(self, query, context: ContextTypes.DEFAULT_TYPE):
        try:
            applications = db.get_pending_applications()
            if not applications:
                await query.edit_message_text("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=self.admin_keyboard())
                return

            app = applications[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
            reviewer_info = ""
            if app['reviewed_by']:
                reviewer_name = self.format_admin_name(app['reviewed_by'])
                reviewer_info = f"\nüë§ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç: {reviewer_name}"
            
            keyboard = [
                [
                    InlineKeyboardButton("üëÄ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"app_review_{app['id']}"),
                ],
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"app_approve_{app['id']}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"app_reject_{app['id']}")
                ],
                [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="admin_applications")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            full_name = f"{app['first_name'] or ''} {app['last_name'] or ''}".strip()
            username = f"@{app['username']}" if app['username'] else "–±–µ–∑ username"
            text = (f"üìù –ó–∞—è–≤–∫–∞ #{app['id']}\n"
                    f"üë§: {full_name} ({username})\n"
                    f"üÜî: {app['user_id']}\n"
                    f"üìÖ: {app['created_at']}"
                    f"{reviewer_info}\n\n"
                    f"üìÑ –ê–Ω–∫–µ—Ç–∞:\n{app['application_text']}")

            await query.edit_message_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞—è–≤–æ–∫: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.",
                reply_markup=self.admin_keyboard()
            )

    async def show_questions(self, query, context: ContextTypes.DEFAULT_TYPE):
        try:
            questions = db.get_unanswered_questions()
            if not questions:
                await query.edit_message_text("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=self.admin_keyboard())
                return

            question = questions[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
            reviewer_info = ""
            if question['reviewed_by']:
                reviewer_name = self.format_admin_name(question['reviewed_by'])
                reviewer_info = f"\nüë§ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç: {reviewer_name}"
            
            keyboard = [
                [
                    InlineKeyboardButton("üëÄ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"question_review_{question['id']}"),
                ],
                [
                    InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"question_answer_{question['id']}"),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"question_delete_{question['id']}")
                ],
                [InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="admin_questions")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            full_name = f"{question['first_name'] or ''} {question['last_name'] or ''}".strip()
            username = f"@{question['username']}" if question['username'] else "–±–µ–∑ username"
            text = (f"‚ùì –í–æ–ø—Ä–æ—Å #{question['id']}\n"
                    f"üë§: {full_name} ({username})\n"
                    f"üÜî: {question['user_id']}\n"
                    f"üìÖ: {question['created_at']}"
                    f"{reviewer_info}\n\n"
                    f"üìÑ –í–æ–ø—Ä–æ—Å:\n{question['question_text']}")

            await query.edit_message_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=self.admin_keyboard()
            )

    async def show_stats(self, query, context: ContextTypes.DEFAULT_TYPE):
        stats = db.get_stats()
        text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                f"üìù –ó–∞—è–≤–æ–∫: {stats['total_applications']}\n"
                f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}\n"
                f"‚è≥ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {stats['pending_applications']}\n"
                f"‚è≥ –ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['unanswered_questions']}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['banned_users']}")
        
        await query.edit_message_text(text, reply_markup=self.admin_keyboard())

    async def handle_application_action(self, query, data, context: ContextTypes.DEFAULT_TYPE):
        user_id = query.from_user.id
        action, app_id = data.split("_")[1], int(data.split("_")[2])
        application = db.get_application(app_id)
        
        if action == "review":
            # –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            db.start_review_application(app_id, user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_name = self.format_admin_name(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await self.application.bot.send_message(
                    application['user_id'],
                    f"üîç –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤–∑—è—Ç–∞ –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            # –£–í–ï–î–û–ú–õ–Ø–ï–ú –î–†–£–ì–ò–• –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í –û –ù–ê–ß–ê–õ–ï –†–ê–°–°–ú–û–¢–†–ï–ù–ò–Ø
            await self.notify_admins_about_review(user_id, "application", app_id, application)
            
            await query.edit_message_text(
                f"üëÄ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{app_id}",
                reply_markup=self.admin_keyboard()
            )
            
        elif action == "approve":
            db.update_application_status(app_id, "approved", user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_name = self.format_admin_name(user_id)
            
            try:
                await self.application.bot.send_message(
                    application['user_id'],
                    f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}!\n\n"
                    f"üìù –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}\n\n"
                    f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
            applicant_info = db.get_admin_info(application['user_id'])
            applicant_name = f"@{applicant_info['username']}" if applicant_info and applicant_info.get('username') else f"ID: {application['user_id']}"
            
            for admin_id in ADMIN_IDS:
                if admin_id != user_id:
                    try:
                        await self.application.bot.send_message(
                            admin_id,
                            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                            f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {applicant_name}\n"
                            f"üëÆ‚Äç‚ôÇÔ∏è –û–¥–æ–±—Ä–∏–ª: {admin_name}\n"
                            f"üìÖ –í—Ä–µ–º—è: {application['created_at']}"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            
            await query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.", reply_markup=self.admin_keyboard())
            
        elif action == "reject":
            db.update_application_status(app_id, "rejected", user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_name = self.format_admin_name(user_id)
            
            try:
                await self.application.bot.send_message(
                    application['user_id'],
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
            applicant_info = db.get_admin_info(application['user_id'])
            applicant_name = f"@{applicant_info['username']}" if applicant_info and applicant_info.get('username') else f"ID: {application['user_id']}"
            
            for admin_id in ADMIN_IDS:
                if admin_id != user_id:
                    try:
                        await self.application.bot.send_message(
                            admin_id,
                            f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n"
                            f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {applicant_name}\n"
                            f"üëÆ‚Äç‚ôÇÔ∏è –û—Ç–∫–ª–æ–Ω–∏–ª: {admin_name}\n"
                            f"üìÖ –í—Ä–µ–º—è: {application['created_at']}"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
            
            await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=self.admin_keyboard())

    async def handle_question_action(self, query, data, context: ContextTypes.DEFAULT_TYPE):
        user_id = query.from_user.id
        action, question_id = data.split("_")[1], int(data.split("_")[2])
        question = db.get_question(question_id)
        
        if action == "review":
            # –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            db.start_review_question(question_id, user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_name = self.format_admin_name(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await self.application.bot.send_message(
                    question['user_id'],
                    f"üîç –í–∞—à –≤–æ–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}. –°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            # –£–í–ï–î–û–ú–õ–Ø–ï–ú –î–†–£–ì–ò–• –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í –û –ù–ê–ß–ê–õ–ï –†–ê–°–°–ú–û–¢–†–ï–ù–ò–Ø
            await self.notify_admins_about_review(user_id, "question", question_id, question)
            
            await query.edit_message_text(
                f"üëÄ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ #{question_id}",
                reply_markup=self.admin_keyboard()
            )
            
        elif action == "answer":
            context.user_data['answering_question'] = question_id
            await query.edit_message_text(
                f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç @{question['username']}:"
            )
        elif action == "delete":
            db.update_question_status(question_id, "deleted", user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_name = self.format_admin_name(user_id)
            
            await query.edit_message_text(f"‚úÖ –í–æ–ø—Ä–æ—Å #{question_id} —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.", reply_markup=self.admin_keyboard())

    async def question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_banned(user.id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return ConversationHandler.END
        
        await update.message.reply_text(
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=self.cancel_keyboard()
        )
        return QUESTION

    async def receive_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_banned(user.id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await update.message.reply_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=self.main_keyboard(user.id)
            )
            return ConversationHandler.END
        
        db.add_question(user.id, text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!",
            reply_markup=self.main_keyboard(user.id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await self.application.bot.send_message(
                    admin_id,
                    f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç @{user.username}:\n\n{text}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        
        return ConversationHandler.END

    async def moderation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_banned(user.id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return ConversationHandler.END
        
        await update.message.reply_text(
            "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:\n\n"
            "–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n"
            "1. –í–∞—à –Ω–∏–∫: \n"
            "2. –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:\n"
            "3. –ü–æ—á–µ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º?:\n"
            "4. –î–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º –ë–∞–Ω/–ú—É—Ç/–í–∞—Ä–Ω:\n"
            "5. –ï—Å—Ç—å –æ–ø—ã—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è?:\n"
            "6. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ(–Ω–µ –º–µ–Ω–µ–µ –¥–≤–∞–¥—Ü–∞—Ç–∏ —Å–ª–æ–≤)\n"
            "7. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –í—ã, –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –Ω–∞–±–æ—Ä—É –≤ –∫–ª–∞–Ω?\n"
            "8. –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –Ω–∞—à –∫–ª–∞–Ω?\n\n"
            "!–í–ê–ñ–ù–û!\n"
            "–ï—Å–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –æ–¥–æ–±—Ä—è—é—Ç, —Ç–æ –≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –Ω–∞ –ø–æ—Å—Ç —Å—Ç–∞–∂—ë—Ä–∞ –∫–ª–∞–Ω–∞.\n"
            "–ù–∞ —Å—Ç–∞–∂—ë—Ä–∫–µ –Ω–µ–ª—å–∑—è –±—Ä–∞—Ç—å –æ—Ç–≥—É–ª—ã.\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–µ - 1 –Ω–µ–¥–µ–ª—è\n"
            "–ü–æ–ª—É—á–µ–Ω–∏–µ 1 –≤—ã–≥–æ–≤–æ—Ä–∞ –Ω–∞ —Å—Ç–∞–∂—ë—Ä–µ - —Å–Ω—è—Ç–∏–µ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=self.cancel_keyboard()
        )
        return MODERATION

    async def receive_moderation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.message.from_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_banned(user.id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await update.message.reply_text(
                "‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=self.main_keyboard(user.id)
            )
            return ConversationHandler.END
        
        db.add_application(user.id, text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! "
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=self.main_keyboard(user.id)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await self.application.bot.send_message(
                    admin_id,
                    f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ—Ç @{user.username}:\n\n{text}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
        
        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        await update.message.reply_text(
            "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=self.main_keyboard(user_id)
        )
        return ConversationHandler.END

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_banned(user_id):
            await update.message.reply_text("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if 'answering_question' in context.user_data:
            question_id = context.user_data.pop('answering_question')
            question = db.get_question(question_id)
            
            try:
                await self.application.bot.send_message(
                    question['user_id'],
                    f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{text}"
                )
                db.update_question_status(question_id, "answered", user_id)
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=self.main_keyboard(user_id))
            except Exception as e:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.", reply_markup=self.main_keyboard(user_id))
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if text == "‚ùì –í–æ–ø—Ä–æ—Å":
            return await self.question(update, context)
        elif text == "üìù –ù–∞–±–æ—Ä –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é":
            return await self.moderation(update, context)
        elif text == "üìú –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞":
            await self.show_rules(update, context)
        elif text == "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and user_id in ADMIN_IDS:
            await self.admin_panel(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=self.main_keyboard(user_id)
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê_–ó–î–ï–°–¨":
            print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!")
            print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram")
            print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
            print("3. –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É BOT_TOKEN –≤ –∫–æ–¥–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
            return
        
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:", ADMIN_IDS)
        print("üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ADMIN_USERNAME_MAP)
        print("üí¨ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:", CHAT_LINK)
        
        self.application.run_polling()

if __name__ == '__main__':
    bot = MinecraftBot()
    bot.run()
